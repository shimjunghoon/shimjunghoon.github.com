module.exports = Tetris

function Tetris(game,opts) {
    var updated = {};
    if (!opts) opts = {};
    if (!opts.pos) opts.pos = {
        x:0,
        y:0,
        z:0
    };
    if (!opts.width) opts.width = 6;
    if (!opts.height) opts.height = 20;
    if (!opts.length) opts.length = 6;
    if (!opts.material) opts.material = 1;
    if (!opts.droprate) opts.droprate = 60;
    if (!opts.levels) opts.levels = [1,5,10,25,50,100,200,500,1000,50000];
    if (!opts.speedincrease) opts.speedincrease = 0.2;
    this.game = game;
    this.pos = opts.pos
    this.width = opts.width;
    this.height = opts.height;
    this.length = opts.length;
    this.material = opts.material;
    this.levels = opts.levels;
    this.speedincrease = opts.speedincrease;
    this.overflag = false;
    this.voxels = this.game.voxels;
    this.size = this.voxels.cubeSize;
    this.pieces = [];
    this.droplocation;
    this.droprate = opts.droprate;
    this.timer = 4;
    this.time = 0;
    this.rowsremoved = 0;
    this.corerate = opts.droprate;
    console.log(this.game.explode)

    var pos = this.pos;
   for(var i = 0; i < this.width; ++i){
        for(var j = 0; j < this.length; ++j){
            this.game.setBlock([pos.x+i, pos.y-1, pos.z+j],1);
        }
    }

    if(this.game.getBlock([pos.x, pos.y-1, pos.z])){
        for(var i = 0; i < this.width; ++i){
            for(var j = 0; j < this.height; ++j){
                this.game.addVoxelMarker(pos.x+i, pos.y+j, pos.z-1,0xff0000);
                this.game.addVoxelMarker(pos.x+i, pos.y+j, pos.z+opts.length,0x00ff00);
            }
        }

        for(var i = 0; i < this.length; ++i){
            for(var j = 0; j < this.height; ++j){
                this.game.addVoxelMarker(pos.x-1, pos.y+j, pos.z+i,0x0000ff);
                this.game.addVoxelMarker(pos.x+this.width, pos.y+j, pos.z+i,0xffff00);
            }
        }

        for(var i = 0; i < this.width; ++i){
            for(var j = 0; j < this.length; ++j){
                this.game.addVoxelMarker(pos.x+i, pos.y+this.height, pos.z+j, 0xFFFFFF);
            }
        }
    }
//    return this;
}


Tetris.prototype.command = function(c,pindex) {
        if (!pindex) pindex = 0;
        switch(c){
            case 0:
                this.spin(pindex,1,0);
                break;
            case 1:
                this.spin(pindex,1,1);
                break;
            case 2:
                this.spin(pindex,1,2);
                break;
            case 3:
                this.move(pindex,1,0,0);
                break;
            case 4:
                this.move(pindex,-1,0,0);
                break;
            case 5:
                this.move(pindex,0,0,1);
                break;
            case 6:
                this.move(pindex,0,0,-1);
                break;
            case 7:
                this.moveDown(pindex);
                break;
            case 8:
                this.slam(pindex);
                break;
        }
    }
Tetris.prototype.slam = function(pindex) {
        if (!pindex) pindex = 0;
        var piece = this.pieces[pindex];
        this.unshow(piece);
        do {
            piece.dy -= 1; 
            this.reposition(piece);
        } while (this.isValid(piece));
        piece.dy += 1;
        this.reposition(piece);
        this.show(piece);
//        flush();
        this.checkRows();
        this.pieces.pop();
    }
Tetris.prototype.moveDown = function(pindex) {
        if (!pindex) pindex = 0;
//        this.move(pindex,0,-1,0,function() {
//            this.checkRows();
//            this.pieces.pop();
//        });
        this.move(pindex,0,-1,0,1);
    }

Tetris.prototype.failop = function(){
    this.checkRows();
    this.pieces.pop();
}
    
Tetris.prototype.spin = function(pindex, cw, axis, failop) {
        var piece = this.pieces[pindex];
        this.unshow(piece);
        piece.spin[axis] += cw;
        this.reposition(piece);
        if (!this.isValid(piece)) {
            piece.spin[axis] -= cw;
            this.reposition(piece);
            this.show(piece);
            if (failop) this.failop();
            return false;
        }
        else {
            this.show(piece);
        }
//        flush();
        return true;
    }
        
Tetris.prototype.move = function (pindex, mx, my, mz, failop) {
        var piece = this.pieces[pindex];
        this.unshow(piece);
        piece.dx += mx;
        piece.dy += my;
        piece.dz += mz;
        this.reposition(piece);
        if (!this.isValid(piece)) {
            piece.dx -= mx;
            piece.dy -= my;
            piece.dz -= mz;    
            this.reposition(piece);
            this.show(piece);
            if (failop) this.failop();
            return false;
        }
        else {
            this.show(piece);
        }
//        flush();
        return true;
    }
    
Tetris.prototype.removeRow = function(m) {
        for (var i = 0; i < this.length; ++i) {
            for (var r = 0; r < this.width; ++r) {
                this.game.explode({x : this.pos.x + (r * this.size), y : this.pos.y + (m * this.size), z : this.pos.z + (i * this.size)});
                this.game.setBlock([this.pos.x + (r * this.size), this.pos.y + (m * this.size), this.pos.z + (i * this.size)],0);
            }
        }
        for (var k = m; k < this.height; k++) {
            for (var i = 0; i < this.length; ++i) {
                for (var j = 0; j < this.width; j++) {
                    this.game.setBlock([this.pos.x + (j * this.size), this.pos.y + (k * this.size), this.pos.z + (i * this.size)],
                    this.game.getBlock([this.pos.x + (j * this.size), this.pos.y + ((k+1) * this.size), this.pos.z + (i * this.size)]));
                }
            }
        }
        ++this.rowsremoved;
        this.checkLevel();
//        flush();
    }
Tetris.prototype.checkLevel  = function() {
        for (var i = 0; i < this.levels.length; i++) {
            if (this.rowsremoved == this.levels[i]) {
//                this.setBoard(i);
                this.faster();
                return;
            }
            if (this.rowsremoved < this.levels[i]) {
                return;
            }
        }
    }
Tetris.prototype.gameOver = function() {
        this.clearBoard();
        this.resetSpeed();
//        this.setBoard(this.material);
        this.overflag = true;
        this.rowsremoved = 0;
    }
    
Tetris.prototype.checkRows = function() {
        var row;
        for (var m = 0; m < this.height;) {
            row = true;
            for (var i = 0; i < this.length; ++i){
                for (var n = 0; n < this.width; n++) {
                    if (!this.game.getBlock([this.pos.x + (n * this.size), this.pos.y + (m * this.size), this.pos.z + (i * this.size)])) {
                        row = false;
                        break;
                    }
                }
                if(!row) {
                    break;
                }
            }
            if (row) {
                this.removeRow(m);
            }
            else {
                ++m;
            }
        }
    }

Tetris.prototype.visual = function(timer) {
        var offset = {
            x : Math.floor((this.pos.x + this.width)/2),
            y : Math.floor(this.pos.y + 3),
            z : Math.floor((this.pos.z + this.length)/2)
        }
        if (timer == 4) { // visualize number 3
            for(var i = 0; i < 3; ++i){
                this.game.setBlock([offset.x-2+i, offset.y, offset.z], 1);
                this.game.setBlock([offset.x-2+i, offset.y+3, offset.z], 1);
                this.game.setBlock([offset.x-2+i, offset.y+6, offset.z], 1);
            }
            for(var i = 0; i < 2; ++i){
                this.game.setBlock([offset.x+1, offset.y+1+i, offset.z],1);
                this.game.setBlock([offset.x+1, offset.y+4+i, offset.z],1);
            }
        }
        else if (timer == 3) { // visualize number 2
            for(var i = 0; i < 3; ++i){
                this.game.setBlock([offset.x-2+i, offset.y, offset.z],0);
                this.game.setBlock([offset.x-2+i, offset.y+3, offset.z], 0);
                this.game.setBlock([offset.x-2+i, offset.y+6, offset.z], 0);
            }
            for(var i = 0; i < 2; ++i){
                this.game.setBlock([offset.x+1, offset.y+1+i, offset.z],0);
                this.game.setBlock([offset.x+1, offset.y+4+i, offset.z],0);
            }

            for(var i = -2; i < 2; ++i){
                this.game.setBlock([offset.x + i, offset.y, offset.z],1);
            }
            for(var i = -1; i < 1; ++i){
                this.game.setBlock([offset.x + i, offset.y+3, offset.z],1);
                this.game.setBlock([offset.x + i, offset.y+6, offset.z],1);
                this.game.setBlock([offset.x-2, offset.y+2+i, offset.z],1);
                this.game.setBlock([offset.x+1, offset.y+5+i, offset.z],1);
            }
            this.game.setBlock([offset.x-2, offset.y+6, offset.z],1);
        }
        else if (timer == 2) { // visualize number 1
            for(var i = -2; i < 2; ++i){
                this.game.setBlock([offset.x + i, offset.y, offset.z],0);
            }
            for(var i = -1; i < 1; ++i){
                this.game.setBlock([offset.x + i, offset.y+3, offset.z],0);
                this.game.setBlock([offset.x + i, offset.y+6, offset.z],0);
                this.game.setBlock([offset.x-2, offset.y+2+i, offset.z],0);
                this.game.setBlock([offset.x+1, offset.y+5+i, offset.z],0);
            }
            this.game.setBlock([offset.x-2, offset.y+6, offset.z],0);

            for(var i = 0; i < 7; ++i){
                this.game.setBlock([offset.x, offset.y + i, offset.z],1);
            }
            this.game.setBlock([offset.x-1, offset.y + 5, offset.z],1);
        }
        else if (timer == 1) { // visualize go
            for(var i = 0; i < 7; ++i){
                this.game.setBlock([offset.x, offset.y + i, offset.z],0);
            }
            this.game.setBlock([offset.x-1, offset.y + 5, offset.z],0);

            for(var i = 1; i < 6; ++i){
                this.game.setBlock([offset.x-3, offset.y +i, offset.z],3);
                this.game.setBlock([offset.x, offset.y +i, offset.z],1);
                this.game.setBlock([offset.x+2, offset.y +i, offset.z],1);
            }
            this.game.setBlock([offset.x-2, offset.y, offset.z],3);
            this.game.setBlock([offset.x+1, offset.y, offset.z],1);
            this.game.setBlock([offset.x-2, offset.y+6, offset.z],3);
            this.game.setBlock([offset.x+1, offset.y+6, offset.z],1);
            this.game.setBlock([offset.x-1, offset.y+6, offset.z],3);
            for(var i = 0; i < 3; ++i){
                this.game.setBlock([offset.x-1, offset.y + i, offset.z],3);
            }
            this.game.setBlock([offset.x-2, offset.y+2, offset.z],3);
        }
        else if (timer == 0) {
            for(var i = 1; i < 6; ++i){
                this.game.setBlock([offset.x-3, offset.y +i, offset.z],0);
                this.game.setBlock([offset.x, offset.y +i, offset.z],0);
                this.game.setBlock([offset.x+2, offset.y +i, offset.z],0);
            }
            this.game.setBlock([offset.x-2, offset.y, offset.z],0);
            this.game.setBlock([offset.x+1, offset.y, offset.z],0);
            this.game.setBlock([offset.x-2, offset.y+6, offset.z],0);
            this.game.setBlock([offset.x+1, offset.y+6, offset.z],0);
            this.game.setBlock([offset.x-1, offset.y+6, offset.z],0);
            for(var i = 0; i < 3; ++i){
                this.game.setBlock([offset.x-1, offset.y + i, offset.z],0);
            }
            this.game.setBlock([offset.x-2, offset.y+2, offset.z],0);
        }
    }

Tetris.prototype.doTick = function() {
        if (this.timer >= 0) {
            this.visual(this.timer);
            --this.timer;
        }
            else {
                if ((!this.pieces) || this.pieces.length == 0) {
                this.makePiece();
            }

            if (!this.pieces) return;
            for (var i = 0; i < this.pieces.length; i++) {
                this.moveDown(i);
            }
        }
    }

Tetris.prototype.tick = function () {
        this.time++;
        if (this.time % this.droprate == 0) {
            this.doTick();
            this.time -= this.droprate;
        }
    }

Tetris.prototype.faster = function() {
        this.droprate = Math.ceil(this.droprate * (1-this.speedincrease));
    }

Tetris.prototype.slower = function() {
        this.droprate = Math.ceil(this.droprate * (1-this.speedincrease));
    }

Tetris.prototype.resetSpeed = function() {
        this.droprate = this.corerate;
    }

/*    this.clearBoard = function() {
        var x = pos.x, y = pos.y, z = pos.z;
        for (var m = 0; m < opts.height+5; m++) {
            for (var n = 0; n < opts.width; n++) {
                set({
                    x: x + size * n , 
                    y: y + size * m, 
                    z: z
                },0);
            }
        }
    }
    this.setBoard = function(material) {
        var x = pos.x, y = pos.y, z = pos.z;
        if (!material) material = opts.material;
        
        for (var m = -1; m <= opts.height; m++) {
            set({
                x: x -1,                
                y: y+size*m, 
                z: z
            }, material);
            set({
                x: x + size*opts.width, 
                y: y+size*m, 
                z: z
            }, material);
        }
        for (var q = -1; q <= opts.width; q++) {
            set({
                x: x + size * q , 
                y: y - 1*size, 
                z: z
            }, material);
        }
    }
*/    
Tetris.prototype.setDroplocation = function(x,y,z) {
        this.droplocation = {
            x: x, 
            y: y, 
            z: z
        };
    }
Tetris.prototype.makeBoard = function() {
//        clearBoard();
//        setBoard(opts.material);
        this.setDroplocation(this.pos.x + (this.width * this.size)/2,this.pos.y + (this.height * this.size),this.pos.z + (this.length * this.size)/2);
//        this.flush();
    }

Tetris.prototype.makePiece = function(pos, type) {
        if (!pos) pos = this.droplocation;
        if (!type) type = Math.floor((Math.random() * 8));
        var piece = [];
        switch (type) {
            case 0: //block
                piece = [{corex: 0, corey: 0, corez: 0}, {corex: 0, corey: 1, corez: 0},{corex: 1, corey: 0, corez: 0},{corex: 1, corey: 1, corez: 0}]
                break;

            case 1: //long
                piece = [{corex: -1, corey: 0, corez: 0}, {corex: 0, corey: 0, corez: 0},{corex: 1, corey: 0, corez: 0},{corex: 2, corey: 0, corez: 0}]
                break;

            case 2: //L
                piece = [{corex: 0, corey: -2, corez: 0}, {corex: 0, corey: -1, corez: 0},{corex: 0, corey: 0, corez: 0},{corex: 1, corey: 0, corez: 0}]
                break;

            case 3: //new
                piece = [{corex: 0, corey: 1, corez: 0}, {corex: 1, corey: 0, corez: 0},{corex: 0, corey: 0, corez: 0},{corex: 0, corey: 0, corez: 1}]
                break;

            case 4: //T
                piece = [{corex: -1, corey: 0, corez: 0}, {corex: 0, corey: 0, corez: 0},{corex: 1, corey: 0, corez: 0},{corex: 0, corey: 1, corez: 0}]
                break;

            case 5://S
                piece = [{corex: 0, corey: 1, corez: 0}, {corex: 0, corey: 0, corez: 0},{corex: -1, corey: 0, corez: 0},{corex: -1, corey: -1, corez: 0}]
                break;

            case 6: //new 2
                piece = [{corex: 1, corey: 1, corez: 0}, {corex: 1, corey: 0, corez: 0},{corex: 0, corey: 0, corez: 0},{corex: 0, corey: 0, corez: 1}]
                break;
            case 7: // new 3
                piece = [{corex: 1, corey: 0, corez: 0}, {corex: 0, corey: 0, corez: 0},{corex: 0, corey: 0, corez: 1},{corex: 0, corey: 1, corez: 1}]
                break;
            case 8: // debug
                piece = [{corex: -3, corey: -3, corez: -3},{corex: -3, corey: -3, corez: -2},{corex: -3, corey: -3, corez: -1},{corex: -3, corey: -3, corez: 0},{corex: -3, corey: -3, corez: 1},{corex: -3, corey: -3, corez: 2},{corex: -3, corey: -2, corez: -3},{corex: -3, corey: -2, corez: -2},{corex: -3, corey: -2, corez: -1},{corex: -3, corey: -2, corez: 0},{corex: -3, corey: -2, corez: 1},{corex: -3, corey: -2, corez: 2},{corex: -3, corey: -1, corez: -3},{corex: -3, corey: -1, corez: -2},{corex: -3, corey: -1, corez: -1},{corex: -3, corey: -1, corez: 0},{corex: -3, corey: -1, corez: 1},{corex: -3, corey: -1, corez: 2},{corex: -3, corey: 0, corez: -3},{corex: -3, corey: 0, corez: -2},{corex: -3, corey: 0, corez: -1},{corex: -3, corey: 0, corez: 0},{corex: -3, corey: 0, corez: 1},{corex: -3, corey: 0, corez: 2},{corex: -3, corey: 1, corez: -3},{corex: -3, corey: 1, corez: -2},{corex: -3, corey: 1, corez: -1},{corex: -3, corey: 1, corez: 0},{corex: -3, corey: 1, corez: 1},{corex: -3, corey: 1, corez: 2},{corex: -3, corey: 2, corez: -3},{corex: -3, corey: 2, corez: -2},{corex: -3, corey: 2, corez: -1},{corex: -3, corey: 2, corez: 0},{corex: -3, corey: 2, corez: 1},{corex: -3, corey: 2, corez: 2},{corex: -2, corey: -3, corez: -3},{corex: -2, corey: -3, corez: -2},{corex: -2, corey: -3, corez: -1},{corex: -2, corey: -3, corez: 0},{corex: -2, corey: -3, corez: 1},{corex: -2, corey: -3, corez: 2},{corex: -2, corey: -2, corez: -3},{corex: -2, corey: -2, corez: -2},{corex: -2, corey: -2, corez: -1},{corex: -2, corey: -2, corez: 0},{corex: -2, corey: -2, corez: 1},{corex: -2, corey: -2, corez: 2},{corex: -2, corey: -1, corez: -3},{corex: -2, corey: -1, corez: -2},{corex: -2, corey: -1, corez: -1},{corex: -2, corey: -1, corez: 0},{corex: -2, corey: -1, corez: 1},{corex: -2, corey: -1, corez: 2},{corex: -2, corey: 0, corez: -3},{corex: -2, corey: 0, corez: -2},{corex: -2, corey: 0, corez: -1},{corex: -2, corey: 0, corez: 0},{corex: -2, corey: 0, corez: 1},{corex: -2, corey: 0, corez: 2},{corex: -2, corey: 1, corez: -3},{corex: -2, corey: 1, corez: -2},{corex: -2, corey: 1, corez: -1},{corex: -2, corey: 1, corez: 0},{corex: -2, corey: 1, corez: 1},{corex: -2, corey: 1, corez: 2},{corex: -2, corey: 2, corez: -3},{corex: -2, corey: 2, corez: -2},{corex: -2, corey: 2, corez: -1},{corex: -2, corey: 2, corez: 0},{corex: -2, corey: 2, corez: 1},{corex: -2, corey: 2, corez: 2},{corex: -1, corey: -3, corez: -3},{corex: -1, corey: -3, corez: -2},{corex: -1, corey: -3, corez: -1},{corex: -1, corey: -3, corez: 0},{corex: -1, corey: -3, corez: 1},{corex: -1, corey: -3, corez: 2},{corex: -1, corey: -2, corez: -3},{corex: -1, corey: -2, corez: -2},{corex: -1, corey: -2, corez: -1},{corex: -1, corey: -2, corez: 0},{corex: -1, corey: -2, corez: 1},{corex: -1, corey: -2, corez: 2},{corex: -1, corey: -1, corez: -3},{corex: -1, corey: -1, corez: -2},{corex: -1, corey: -1, corez: -1},{corex: -1, corey: -1, corez: 0},{corex: -1, corey: -1, corez: 1},{corex: -1, corey: -1, corez: 2},{corex: -1, corey: 0, corez: -3},{corex: -1, corey: 0, corez: -2},{corex: -1, corey: 0, corez: -1},{corex: -1, corey: 0, corez: 0},{corex: -1, corey: 0, corez: 1},{corex: -1, corey: 0, corez: 2},{corex: -1, corey: 1, corez: -3},{corex: -1, corey: 1, corez: -2},{corex: -1, corey: 1, corez: -1},{corex: -1, corey: 1, corez: 0},{corex: -1, corey: 1, corez: 1},{corex: -1, corey: 1, corez: 2},{corex: -1, corey: 2, corez: -3},{corex: -1, corey: 2, corez: -2},{corex: -1, corey: 2, corez: -1},{corex: -1, corey: 2, corez: 0},{corex: -1, corey: 2, corez: 1},{corex: -1, corey: 2, corez: 2},{corex: 0, corey: -3, corez: -3},{corex: 0, corey: -3, corez: -2},{corex: 0, corey: -3, corez: -1},{corex: 0, corey: -3, corez: 0},{corex: 0, corey: -3, corez: 1},{corex: 0, corey: -3, corez: 2},{corex: 0, corey: -2, corez: -3},{corex: 0, corey: -2, corez: -2},{corex: 0, corey: -2, corez: -1},{corex: 0, corey: -2, corez: 0},{corex: 0, corey: -2, corez: 1},{corex: 0, corey: -2, corez: 2},{corex: 0, corey: -1, corez: -3},{corex: 0, corey: -1, corez: -2},{corex: 0, corey: -1, corez: -1},{corex: 0, corey: -1, corez: 0},{corex: 0, corey: -1, corez: 1},{corex: 0, corey: -1, corez: 2},{corex: 0, corey: 0, corez: -3},{corex: 0, corey: 0, corez: -2},{corex: 0, corey: 0, corez: -1},{corex: 0, corey: 0, corez: 0},{corex: 0, corey: 0, corez: 1},{corex: 0, corey: 0, corez: 2},{corex: 0, corey: 1, corez: -3},{corex: 0, corey: 1, corez: -2},{corex: 0, corey: 1, corez: -1},{corex: 0, corey: 1, corez: 0},{corex: 0, corey: 1, corez: 1},{corex: 0, corey: 1, corez: 2},{corex: 0, corey: 2, corez: -3},{corex: 0, corey: 2, corez: -2},{corex: 0, corey: 2, corez: -1},{corex: 0, corey: 2, corez: 0},{corex: 0, corey: 2, corez: 1},{corex: 0, corey: 2, corez: 2},{corex: 1, corey: -3, corez: -3},{corex: 1, corey: -3, corez: -2},{corex: 1, corey: -3, corez: -1},{corex: 1, corey: -3, corez: 0},{corex: 1, corey: -3, corez: 1},{corex: 1, corey: -3, corez: 2},{corex: 1, corey: -2, corez: -3},{corex: 1, corey: -2, corez: -2},{corex: 1, corey: -2, corez: -1},{corex: 1, corey: -2, corez: 0},{corex: 1, corey: -2, corez: 1},{corex: 1, corey: -2, corez: 2},{corex: 1, corey: -1, corez: -3},{corex: 1, corey: -1, corez: -2},{corex: 1, corey: -1, corez: -1},{corex: 1, corey: -1, corez: 0},{corex: 1, corey: -1, corez: 1},{corex: 1, corey: -1, corez: 2},{corex: 1, corey: 0, corez: -3},{corex: 1, corey: 0, corez: -2},{corex: 1, corey: 0, corez: -1},{corex: 1, corey: 0, corez: 0},{corex: 1, corey: 0, corez: 1},{corex: 1, corey: 0, corez: 2},{corex: 1, corey: 1, corez: -3},{corex: 1, corey: 1, corez: -2},{corex: 1, corey: 1, corez: -1},{corex: 1, corey: 1, corez: 0},{corex: 1, corey: 1, corez: 1},{corex: 1, corey: 1, corez: 2},{corex: 1, corey: 2, corez: -3},{corex: 1, corey: 2, corez: -2},{corex: 1, corey: 2, corez: -1},{corex: 1, corey: 2, corez: 0},{corex: 1, corey: 2, corez: 1},{corex: 1, corey: 2, corez: 2},{corex: 2, corey: -3, corez: -3},{corex: 2, corey: -3, corez: -2},{corex: 2, corey: -3, corez: -1},{corex: 2, corey: -3, corez: 0},{corex: 2, corey: -3, corez: 1},{corex: 2, corey: -3, corez: 2},{corex: 2, corey: -2, corez: -3},{corex: 2, corey: -2, corez: -2},{corex: 2, corey: -2, corez: -1},{corex: 2, corey: -2, corez: 0},{corex: 2, corey: -2, corez: 1},{corex: 2, corey: -2, corez: 2},{corex: 2, corey: -1, corez: -3},{corex: 2, corey: -1, corez: -2},{corex: 2, corey: -1, corez: -1},{corex: 2, corey: -1, corez: 0},{corex: 2, corey: -1, corez: 1},{corex: 2, corey: -1, corez: 2},{corex: 2, corey: 0, corez: -3},{corex: 2, corey: 0, corez: -2},{corex: 2, corey: 0, corez: -1},{corex: 2, corey: 0, corez: 0},{corex: 2, corey: 0, corez: 1},{corex: 2, corey: 0, corez: 2},{corex: 2, corey: 1, corez: -3},{corex: 2, corey: 1, corez: -2},{corex: 2, corey: 1, corez: -1},{corex: 2, corey: 1, corez: 0},{corex: 2, corey: 1, corez: 1},{corex: 2, corey: 1, corez: 2},{corex: 2, corey: 2, corez: -3},{corex: 2, corey: 2, corez: -2},{corex: 2, corey: 2, corez: -1},{corex: 2, corey: 2, corez: 0},{corex: 2, corey: 2, corez: 1},{corex: 2, corey: 2, corez: 2}]
            }
        piece.material = type % 7 + 3;
        piece.initx = pos.x;
        piece.inity = pos.y;
        piece.initz = pos.z;
        piece.dx = 0;
        piece.dy = 0;
        piece.dz = 0;
        piece.spin = [0, 0, 0];
        for (var i = 0; i < piece.length; ++i){
            var block = piece[i];
            piece[i].spinx = piece[i].corex;
            piece[i].spiny = piece[i].corey;
            piece[i].spinz = piece[i].corez;
        }

        this.reposition(piece);
        if (!this.isValid(piece)) {
            this.gameOver();
            return;
        }
        this.show(piece);
        if (!this.pieces) this.pieces = [];
        this.pieces.push(piece);
//        flush();
    }
    
Tetris.prototype.reposition = function(piece) {
        for (var i = 0; i < piece.length; i++) {
            var block = piece[i];
            var tx = block.spinx;
            var ty = block.spiny;
            var tz = block.spinz;
            if(piece.spin[0] === 1){
                block.spinx = -ty;
                block.spiny = tx;
            }
            else if(piece.spin[0] === -1){
                block.spinx = ty;
                block.spiny = -tx;
            }
            else if(piece.spin[1] === 1){
                block.spiny = -tz;
                block.spinz = ty;
            }
            else if(piece.spin[1] === -1){
                block.spiny = tz;
                block.spinz = -ty;
            }
            else if(piece.spin[2] === 1){
                block.spinz = -tx;
                block.spinx = tz;
            }
            else if(piece.spin[2] === -1){
                block.spinz = tx;
                block.spinx = -tz;
            }
            block.x = ((block.spinx + piece.dx) * this.size) + piece.initx;
            block.y = ((block.spiny + piece.dy) * this.size) + piece.inity;
            block.z = ((block.spinz + piece.dz) * this.size) + piece.initz;
        }
        piece.spin = [0, 0, 0];
    }
    
Tetris.prototype.show = function(piece) {
        for (var i = 0; i < piece.length; i++) {
            this.game.setBlock([piece[i].x,piece[i].y,piece[i].z],piece.material);
        }
    }
    
Tetris.prototype.unshow = function(piece) {
        for (var i = 0; i < piece.length; i++) {
            this.game.setBlock([piece[i].x,piece[i].y,piece[i].z],0);
        }
    }

    
Tetris.prototype.isValid = function(piece) {
        for (var i = 0; i < piece.length; i++) {
            if (this.game.getBlock([piece[i].x,piece[i].y,piece[i].z])) return false;
            if (piece[i].x <= this.pos.x-1 || piece[i].x >= this.pos.x+this.width ||
                piece[i].z <= this.pos.z-1 || piece[i].z >= this.pos.z+this.length) return false;
        }
        return true;
    }
    
Tetris.prototype.set = function(posxyz, value) {
        voxels.voxelAtPosition(posxyz, value);
        var c = voxels.chunkAtPosition(posxyz);
        var key = c.join('|');
        if (!updated[key] && voxels.chunks[key]) {
            updated[key] = voxels.chunks[key];
        }
    }
    
Tetris.prototype.flush = function() {
        Object.keys(updated).forEach(function (key) {
            this.game.showChunk(updated[key]);
        });
    }